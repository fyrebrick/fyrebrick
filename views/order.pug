extends layout
block styles
    style.
        td {
            font-size: 41px;
            font-weight: bold;
        }

        [type="search"] {
            font-size: 41px;
        }
        .progress {
            top: -21px;
            position: relative;
        }
block content
    .modal#modal_order(tabindex='-1' role='dialog')
        .modal-dialog.modal-xl
            .modal-content
                .modal-header
                    h5.modal-title Order details
                    button.close(type='button' data-dismiss='modal' aria-label='Close')
                        span(aria-hidden='true') &times;
                .modal-body
                    table.table.table-striped
                        tr
                            td(scope="row") payment
                            td#payment
                                #spinner_payment.spinner-border(role='status')
                                    span.sr-only Loading...
                        tr
                            td(scope="row") status
                            td#status
                                #spinner_status.spinner-border(role='status')
                                    span.sr-only Loading...

                        tr
                            td(scope="row") Shipping Method
                            td#shipping_method
                                #spinner_shipping_method.spinner-border(role='status')
                                    span.sr-only Loading...

                        tr
                            td(scope="row") Shipping Cost
                            td#shipping_cost
                                #spinner_shipping_cost.spinner-border(role='status')
                                    span.sr-only Loading...

                        tr
                            td(scope="row") address
                            td#address
                                #spinner_address.spinner-border(role='status')
                                    span.sr-only Loading..
                        //tr
                            td(scope="row") telephone
                            td#telephone
                                #spinner_telephone.spinner-border(role='status')
                                    span.sr-only Loading..


                .modal-footer
                    button.btn.btn-secondary(type='button' data-dismiss='modal') Close
    .d-flex.flex-row-reverse.bd-highlight#update_row(style="display:none;")
        .p-2.bd-highlight
            button#edit_description_update.btn.btn-primary(style="display:none;" type="button" value="update") update
                #spinner_edit_description_update
    .row
        .col-4
            h1
                a#details(data-toggle="modal" data-target="#modal_order", href="#details")="Order: "+order_id
        .col-2
            button#edit_description_button.btn.btn-outline-primary(type='button')
                i.fas.fa-edit
        .col-6
            p#description.lead
                #spinner_description.spinner-border(role='status')
                    span.sr-only Loading..
            .form-group
                textarea#edit_description.form-control(rows="3", style="display:none;")

    hr
    .progress
        .progress-bar#progress-fill.progress-bar-striped.progress-bar-animated( role='progressbar' style="width: 0%;" )
        .progress-bar#progress-empty.bg-light(role='progressbar' style='width: 100%')
    table#table_id.display(data-display-length='-1')
        thead
            tr
                th Check!
                th Remark
                th Color
                th.data-class-name Qt
                th N/U
                th pic
block scripts
    script.
        $(document).ready(function () {
            let spinner = "<div id=\"spinner_edit\" class=\"spinner-border\" role=\"status\">\n" +
                "  <span class=\"sr-only\">Loading...</span>\n" +
                "</div>";
            let check = "<i id=\"check_edit\" class=\"fas fa-check\"></i>";
            let order_db = null;
            let order_json = null;
            //get order details from api first
            $.ajax({
                method: "GET",
                url: "/api/orders/#{order_id}"
            })
                .done(function (data) {
                    $("#spinner_payment").remove();
                    $("#payment").text(data.data.payment.method);
                    $("#spinner_status").remove();
                    $("#status").text(data.data.status);
                    $("#spinner_shipping_method").remove();
                    $("#shipping_method").text(data.data.shipping.method);
                    $("#spinner_shipping_cost").remove();
                    $("#shipping_cost").text(data.data.cost.shipping+" "+data.data.cost.currency_code);
                    $("#spinner_address").remove();
                    $("#address").text(data.data.shipping.address.full+" "+data.data.shipping.address.country_code );
                });

            let pappieBedrag = 0.00;
            //get order items for table second
            $('#table_id').DataTable({
                ajax: {
                    paging: false,
                    url: '/api/orders/#{order_id}/items',
                    dataSrc: 'data'
                },
                columns:[
                    {
                        data: null,
                        bSearchable: false,
                        render: function (data, type, row, meta) {
                            if(row.remarks!==undefined){
                                let l = row.remarks.substr(0, 1).toLowerCase();
                                console.log(row);
                                const de = /[a-d,A-D]\d{1,}/gm;
                                const ute = row.remarks;
                                if (de.exec(ute)) {
                                    //pappieBedrag+=(row.unit_price*row.quantity);
                                    return "<div class='pappieCheckbox'><span class='box papa'></span><input type='checkbox' class='checkers' id='check" + row.inventory_id + "' ></div>";
                                } else {
                                    return "<div class='merijnCheckbox'><span class='box merijn'></span><input type='checkbox' class='checkers' id='check" + row.inventory_id + "' ></div>";
                                }
                            }else{
                                return "<div class='merijnCheckbox'><span class='box merijn'></span><input type='checkbox' class='checkers' id='check" + row.inventory_id + "' ></div>";
                            }
                        }
                    },
                    {data:null,
                    render:function(data,type,row,meta){
                        if(row.remarks===undefined){
                            return "<a href='https://www.bricklink.com/inventory_detail.asp?pg=1&invID=" + row.inventory_id + "' target='_blank'  >geen remark </a>";
                        }else{
                            const remarks = row.remarks;
                            const eersteLettervanRemark = remarks.substr(0,1);
                            const amountOfNumbersInRemarks = (remarks.match(/\d/g) || []).length;
                            const heeftLetterInRemarks  = ((remarks.toLowerCase().match(/[a-z]/g) || []).length>=1 );
                            let remarkNew;
                            switch (amountOfNumbersInRemarks) {
                                case 1:
                                    if(heeftLetterInRemarks){ //A1
                                        remarkNew= eersteLettervanRemark+"000"+remarks.substr(1,remarks.length);
                                    }else{//1
                                        remarkNew=  "000"+remarks;
                                    }
                                    break;
                                case 2:
                                    if(heeftLetterInRemarks){ //A12
                                        remarkNew=  eersteLettervanRemark+"00"+remarks.substr(1,remarks.length);
                                    }else{
                                        remarkNew= "00"+row.remarks;
                                    }
                                    break;
                                case 3:
                                    if (heeftLetterInRemarks) { //A12
                                        remarkNew= eersteLettervanRemark + "0" + remarks.substr(1,remarks.length);
                                    } else {
                                        remarkNew= "0" + row.remarks;
                                    }
                                    break;
                                default:
                                    remarkNew=row.remarks;
                            }
                            return "<a href='https://www.bricklink.com/inventory_detail.asp?pg=1&invID=" + row.inventory_id + "' target='_blank'  >"+remarkNew+"</a>";
                        }
                    }
                    },
                    {
                        data:'color_name',
                        render: function(data,type,row,meta){
                            if(data==="(Not Applicable)"){
                                return "<i class=\"fas fa-tint-slash\"></i>";
                            }else{
                                return data;
                            }
                        }
                    },
                    {data:'quantity'},
                    {data:'new_or_used'},
                    {
                        data:'color_id',
                        bSortable: false,
                        bSearchable: false,
                        render: function (data, type, row, meta) {
                            let id = row.color_id+row.item.no;
                            let modal = "<div class=\"modal fade\" id=\"modal"+id+"\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"modalTitle"+id+"\" aria-hidden=\"true\">\n" +
                                "  <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n" +
                                "    <div class=\"modal-content\">\n" +
                                "      <div class=\"modal-header\">\n" +
                                "        <h5 class=\"modal-title\" id=\"modalTitel"+id+"\">Item no "+row.item.no+"</h5>\n" +
                                "        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n" +
                                "          <span aria-hidden=\"true\">&times;</span>\n" +
                                "        </button>\n" +
                                "      </div>\n" +
                                "      <div class=\"modal-body\">\n" +
                                "        "+row.item.name+
                                "      </div>\n" +
                                "      <div class=\"modal-footer\">\n" +
                                "        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n" +
                                "      </div>\n" +
                                "    </div>\n" +
                                "  </div>\n" +
                                "</div>";
                            let _type=row.item.type.substr(0,1);

                            switch (row.item.type) {
                                case "SET":
                                    return modal + "\n" +
                                        "<img id=\"img"+id+"\" class=\"img-thumbnail \" src=\"https://img.bricklink.com/S/" + row.item.no + ".jpg\"" + " alt=\"\"> ";
                                    break;
                                case "MINIFIG":
                                    return modal + "\n" +
                                        "<img id=\"img"+id+"\" class=\"img-thumbnail \" src=\"https://img.bricklink.com/ItemImage/MN/"+row.color_id+"/"+row.item.no+".png\"" + " alt=\"\"> ";
                                    break;
                                case "PART":
                                    return modal + "\n" +
                                        "<img id=\"img"+id+"\" class=\"img-thumbnail \" src=\"https://img.bricklink.com/ItemImage/PN/"+data+"/"+row.item.no+".png\"" + " alt=\"\"> ";
                                    break;
                                case 'INSTRUCTION':
                                    return modal + "\n" +
                                        "<img id=\"img" + id + "\" class=\"img-thumbnail \" src=\"https://img.bricklink.com/ItemImage/IN/" + data + "/" + row.item.no + ".png\"" + " alt=\"\"> ";
                                    break;
                                case 'BOOK':
                                    return modal + "\n" +
                                        "<img id=\"img" + id + "\" class=\"img-thumbnail \" src=\"https://img.bricklink.com/ItemImage/BN/" + data + "/" + row.item.no + ".png\"" + " alt=\"\"> ";
                                    break;
                                case 'SET':
                                    return modal + "\n" +
                                        "<img id=\"img" + id + "\" class=\"img-thumbnail \" src=\"https://img.bricklink.com/ItemImage/SN/" + data + "/" + row.item.no + ".png\"" + " alt=\"\"> ";
                                    break;
                                case 'GEAR':
                                    return modal + "\n" +
                                        "<img id=\"img" + id + "\" class=\"img-thumbnail \" src=\"https://img.bricklink.com/ItemImage/GN/" + data + "/" + row.item.no + ".png\"" + " alt=\"\"> ";
                                    break;
                                case 'CATALOG':
                                    return modal + "\n" +
                                        "<img id=\"img" + id + "\" class=\"img-thumbnail \" src=\"https://img.bricklink.com/ItemImage/CN/" + data + "/" + row.item.no + ".png\"" + " alt=\"\"> ";
                                    break;
                                default:
                                    return "<i class=\"fas fa-image\"></i>";
                            }

                        }
                    }
                ],
                initComplete:function(settings,json){
                    order_json=json;
                    console.log(json,'json');
                    //get order from database third
                    $.ajax({
                        method: "GET",
                        url:"/db/order/#{order_id}?orders_total="+order_json.data.length
                    }).done(function (data) {
                        console.log(data,"data");
                        order_db = data;
                        //update description
                        $("#spinner_description").remove();
                        $("#description").text(data.description);
                        $("#edit_description").val(data.description);
                        $("#edit_description_button").click(function () {
                            $("#description").toggle();
                            $("#edit_description").toggle();
                            $("#edit_description_update").toggle();
                        });
                        //update progress bar
                        progress_bar(order_db.orders_checked,order_db.orders_total)
                        $("#edit_description_update").click(function () {
                            $.ajax({
                                method: "PUT",
                                url: "/db/order/#{order_id}",
                                data: {
                                    description: $("#edit_description").val()
                                }
                            }).done(function (data) {
                                $("#description").text($("#edit_description").val());
                                $("#description").toggle();
                                $("#edit_description").toggle();
                                $("#edit_description_update").toggle();
                            });
                        });
                        $('table#table_id').on('mousedown', 'input', function (e) {
                            e.preventDefault();
                            if ($(e.target).is("input.checkers")) {
                                console.log($(this).is(":checked"));
                                let state = $(this).is(":checked");

                                $("#" + this.id).prop("checked", state);
                                //update the database
                                //id of checkboxes are like this => "check[id]"
                                let id = this.id.substr(5, this.id.length);
                                $.ajax({
                                    method: "PUT",
                                    url: "/db/order/#{order_id}",
                                    data: {item: id}
                                }).done(function (data) {
                                    console.log("done", data);
                                    //progress bar updated
                                    if(state){
                                        if(order_db.orders_checked!=0){
                                            order_db.orders_checked--;
                                        }
                                    }else{
                                        order_db.orders_checked++;
                                    }
                                    progress_bar(order_db.orders_checked,order_db.orders_total);
                                });
                            }
                        }).on('click', 'img', function (e) {
                            e.preventDefault();
                            if ($(e.target).is('img.img-thumbnail')) {
                                let modalId = "#modal" + this.id.substr(3, this.id.length);
                                console.log(modalId);
                                $(modalId).modal('show');
                            }
                        });
                        //$("#pappieBedrag").text("Pappie: "+pappieBedrag.toFixed(2)+"€");
                        console.log('initcomplete! starting checkboxes');
                        for (const i of order_db.items) {
                            $("#check" + i.id).prop("checked", i.status);
                        }
                    });

                }
            });
            function progress_bar (orders_checked,orders_total){
                let fill_percent = Number(((orders_checked / orders_total) * 100));
                let empty_percent = Number((100 - fill_percent))
                console.log(fill_percent, empty_percent);
                $("#progress-fill").width(fill_percent + "%");
                $("#progress-fill").text(orders_checked+"/"+orders_total);
                $("#progress-empty").width(empty_percent + "%");
            };

            function setColor(color_name) {
                let css;
                switch (color_name) {
                    case "transparent":
                        css = {"background-color": "transparent"};
                        break;
                    case "Black":
                        css = {"background-color": "#212121", "color": "#FFF"};
                        break;
                    case "Blue":
                        css = {"background-color": "#0057A6", "color": "#FFF"};
                        break;
                    case "Bright Green":
                        css = {"background-color": "#10CB31", "color": "#000"};
                        break;
                    case "Bright Light Blue":
                        css = {"background-color": "#9FC3E9", "color": "#000"};
                        break;
                    case "Bright Light Orange":
                        css = {"background-color": "#F7BA30", "color": "#000"};
                        break;
                    case "Bright Light Yellow":
                        css = {"background-color": "#F3E055", "color": "#000"};
                        break;
                    case "Bright Pink":
                        css = {"background-color": "#FFBBFF", "color": "#000"};
                        break;
                    case "Brown":
                        css = {"background-color": "#3399FF", "color": "#FFF"};
                        break;
                    case "Dark Azure":
                        css = {"background-color": "#3399FF", "color": "#FFF"};
                        break;
                    case "Dark Blue":
                        css = {"background-color": "#143044", "color": "#FFF"};
                        break;
                    case "Dark Bluish Gray":
                        css = {"background-color": "#595D60", "color": "#FFF"};
                        break;
                    case "Dark Gray":
                        css = {"background-color": "#6B5A5A", "color": "#FFF"};
                        break;
                    case "Dark Green":
                        css = {"background-color": "#2E5543", "color": "#FFF"};
                        break;
                    case "Dark Orange":
                        css = {"background-color": "#B35408", "color": "#FFF"};
                        break;
                    case "Dark Pink":
                        css = {"background-color": "#C87080", "color": "#FFF"};
                        break;
                    case "Dark Purple":
                        css = {"background-color": "#5F2683", "color": "#FFF"};
                        break;
                    case "Dark Red":
                        css = {"background-color": "#6A0E15", "color": "#FFF"};
                        break;
                    case "Dark Tan":
                        css = {"background-color": "#907450", "color": "#FFF"};
                        break;
                    case "Dark Turquoise":
                        css = {"background-color": "#008A80", "color": "#FFF"};
                        break;
                    case "Green":
                        css = {"background-color": "#00642E", "color": "#FFF"};
                        break;
                    case "Lavender":
                        css = {"background-color": "#B18CBF", "color": "#FFF"};
                        break;
                    case "Light Aqua":
                        css = {"background-color": "#CCFFFF", "color": "#000"};
                        break;
                    case "Light Blue":
                        css = {"background-color": "#B4D2E3", "color": "#000"};
                        break;
                    case "Light Bluish Gray":
                        css = {"background-color": "#AFB5C7", "color": "#000"};
                        break;
                    case "Light Gray":
                        css = {"background-color": "#9C9C9C", "color": "#000"};
                        break;
                    case "Light Lime":
                        css = {"background-color": "#EBEE8F", "color": "#000"};
                        break;
                    case "Light Nougat":
                        css = {"background-color": "#FECCB0", "color": "#000"};
                        break;
                    case "Light Pink":
                        css = {"background-color": "#FFE1FF", "color": "#000"};
                        break;
                    case "Light Purple":
                        css = {"background-color": "#DA70D6", "color": "#000"};
                        break;
                    case "Light Yellow":
                        css = {"background-color": "#FFE383", "color": "#000"};
                        break;
                    case "Lime":
                        css = {"background-color": "#A6CA55", "color": "#000"};
                        break;
                    case "Maersk Blue":
                        css = {"background-color": "#6BADD6", "color": "#000"};
                        break;
                    case "Magenta":
                        css = {"background-color": "#B52952", "color": "#FFF"};
                        break;
                    case "Medium Azure":
                        css = {"background-color": "#42C0FB", "color": "#000"};
                        break;
                    case "Medium Blue":
                        css = {"background-color": "#61AFFF", "color": "#000"};
                        break;
                    case "Medium Lavender":
                        css = {"background-color": "#885E9E", "color": "#FFF"};
                        break;
                    case "Medium Lime":
                        css = {"background-color": "#BDC618", "color": "#000"};
                        break;
                    case "Medium Nougat":
                        css = {"background-color": "#E3A05B", "color": "#000"};
                        break;
                    case "Medium Orange":
                        css = {"background-color": "#FFA531", "color": "#000"};
                        break;
                    case "Medium Violet":
                        css = {"background-color": "#9391E4", "color": "#000"};
                        break;
                    case "Nougat":
                        css = {"background-color": "#FFAF7D", "color": "#000"};
                        break;
                    case "Olive Green":
                        css = {"background-color": "#7C9051", "color": "#FFF"};
                        break;
                    case "Orange":
                        css = {"background-color": "#FF7E14", "color": "#FFF"};
                        break;
                    case "Pink":
                        css = {"background-color": "#FFC0CB", "color": "#000"};
                        break;
                    case "Purple":
                        css = {"background-color": "#A5499C", "color": "#FFF"};
                        break;
                    case "Red":
                        css = {"background-color": "#B30006", "color": "#FFF"};
                        break;
                    case "Reddish Brown":
                        css = {"background-color": "#89351D", "color": "#FFF"};
                        break;
                    case "Sand Blue":
                        css = {"background-color": "#5A7184", "color": "#FFF"};
                        break;
                    case "Sand Green":
                        css = {"background-color": "#76A290", "color": "#FFF"};
                        break;
                    case "Sand Red":
                        css = {"background-color": "#8C6B6B", "color": "#FFF"};
                        break;
                    case "Tan":
                        css = {"background-color": "#DEC69C", "color": "#000"};
                        break;
                    case "Very Light Orange":
                        css = {"background-color": "#E6C05D", "color": "#000"};
                        break;
                    case "White":
                        css = {"background-color": "#FFFFFF", "color": "#000"};
                        break;
                    case "Yellow":
                        css = {"background-color": "#F7D117", "color": "#000"};
                        break;
                    case "Yellowish Green":
                        css = {"background-color": "#DFEEA5", "color": "#000"};
                        break;
                    case "Trans-Clear":
                        css = {"background-color": "#EEEEEE", "color": "#000"};
                        break;
                    case "Trans-Dark Blue":
                        css = {"background-color": "#00296B", "color": "#FFF"};
                        break;
                    case "Trans-Light Blue":
                        css = {"background-color": "#68BCC5", "color": "#000"};
                        break;
                    case "Trans-Light Orange":
                        css = {"background-color": "#E99A3A", "color": "#000"};
                        break;
                    case "Trans-Neon Green":
                        css = {"background-color": "#C0F500", "color": "#000"};
                        break;
                    case "Trans-Neon Orange":
                        css = {"background-color": "#FF4231", "color": "#FFF"};
                        break;
                    case "Trans-Orange":
                        css = {"background-color": "#D04010", "color": "#FFF"};
                        break;
                    case "Trans-Yellow":
                        css = {"background-color": "#EBF72D", "color": "#000"};
                        break;
                    case "Chrome Gold":
                        css = {"background-color": "#F1F2E1", "color": "#000"};
                        break;
                    case "Chrome Silver":
                        css = {"background-color": "#DCDCDC", "color": "#000"};
                        break;
                    case "Pearl Light Gray":
                        css = {"background-color": "#ACB7C0", "color": "#000"};
                        break;
                    case "Metallic Gold":
                        css = {"background-color": "#B8860B", "color": "#FFF"};
                        break;
                    case "Milky White":
                        css = {"background-color": "#D4D3DD", "color": "#000"};
                        break;
                }
                return css;
            }
        });

