extends layout
block styles
    style.
        body{
            width: max-content;
        }
        img{
            min-height:200px !important;
            min-width: 200px !important;
        }
        tbody tr td:nth-child(2) a {
            font-size-adjust: initial;
            font-size: 26px;
            text-align: center;
        }
        td {
            font-size: 41px;
            font-weight: bold;
        }
        [type="search"] {
            font-size: 41px;
        }
        .progress {
            top: -21px;
            position: relative;
        }
        tbody tr td:nth-child(1) {
            margin-top: 27px;
            padding-top: 40px;
            padding-bottom: 40px;
        }
        .spinner-box {
            background-color: #fff;
            z-index: 20;
            border-radius: 55px;
            opacity: 0.7;
            position: relative;
        }
        .buttonBig {
            width: 200px;
            height: 80px;
            font-size: 20px;
        }
        .buttonModal {
            margin-left: 25px;
            margin-right: 25px;
            font-size: 31px !important;
            flex: auto;
            postition: relative;
        }

        #inputIndicator, #qtyInput {
            height: 60px;
            font-size: 30px;
        }
        #inputIndicator {
            width: 58px;
            padding-left: 21px;
        }
        .qtyNumber {
            margin-left: 10px;
            font-size: 20px;
            font-weight: 600;
        }
block content
    #qtyModal.modal.fade.bd-example-modal-xl(tabindex='-1' role='dialog' aria-labelledby='myExtraLargeModalLabel' aria-hidden='true')
        .modal-dialog.modal-xl
            .modal-content
                .modal-header
                    p#qtyId(style='display:none;')
                    h5#qtyTitle.modal-title Add or remove quantity to this item
                    button.close(type='button' data-dismiss='modal' aria-label='Close')
                        span(aria-hidden='true') &times;
                .modal-body
                    .form
                        .form-group
                            p.lead#qtyLabelCurrent(for="qtyInput") Current :
                                span#qtyNumberCurrent.qtyNumber 0
                            p.lead#qtyLabelNext(for="qtyInput") Updated :
                                span.qtyNumber#qtyNumberNext ?
                            .input-group
                                .input-group-prepend
                                    span#inputIndicator.input-group-text ?
                                input#qtyInput.form-control(type="number", step="1" min="0", placeholder="Quantity to add or remove")
                        .row
                            button#qtyButtonAdd.buttonBig.buttonModal.btn.btn-success(type="button") Add
                            button#qtyButtonRemove.buttonBig.buttonModal.btn.btn-danger(type="button") Remove
                .modal-footer
                    button#qtyButtonSubmit.buttonBig.btn.btn-secondary(type="submit") update
    .modal#modal_order(tabindex='-1' role='dialog')
        .modal-dialog.modal-xl
            .modal-content
                .modal-header
                    h5.modal-title Order details
                    button.close(type='button' data-dismiss='modal' aria-label='Close')
                        span(aria-hidden='true') &times;
                .modal-body
                    table.table.table-striped
                        tr
                            td(scope="row") payment
                            td#payment
                                #spinner_payment.spinner-border(role='status')
                                    span.sr-only Loading...
                        tr
                            td(scope="row") status
                            td#status
                                #spinner_status.spinner-border(role='status')
                                    span.sr-only Loading...

                        tr
                            td(scope="row") Shipping Method
                            td#shipping_method
                                #spinner_shipping_method.spinner-border(role='status')
                                    span.sr-only Loading...

                        tr
                            td(scope="row") Shipping Cost
                            td#shipping_cost
                                #spinner_shipping_cost.spinner-border(role='status')
                                    span.sr-only Loading...

                        tr
                            td(scope="row") address
                            td#address
                                #spinner_address.spinner-border(role='status')
                                    span.sr-only Loading..
                        //tr
                            td(scope="row") telephone
                            td#telephone
                                #spinner_telephone.spinner-border(role='status')
                                    span.sr-only Loading..


                .modal-footer
                    button.btn.btn-secondary(type='button' data-dismiss='modal') Close
    .d-flex.flex-row-reverse.bd-highlight#update_row(style="display:none;")
        .p-2.bd-highlight
            button#edit_description_update.btn.btn-primary(style="display:none;" type="button" value="update") update
                #spinner_edit_description_update
    .row
        .col-4
            h1
                a#details(data-toggle="modal" data-target="#modal_order", href="#details")="Order: "+order_id
        .col-2
            button#edit_description_button.btn.btn-outline-primary(type='button')
                i.fas.fa-edit
        .col-6
            p#description.lead
                #spinner_description.spinner-border(role='status')
                    span.sr-only Loading..
            .form-group
                textarea#edit_description.form-control(rows="3", style="display:none;")

    hr
    .progress
        .progress-bar#progress-fill.progress-bar-striped.progress-bar-animated( role='progressbar' style="width: 0%;" )
        .progress-bar#progress-empty.bg-light(role='progressbar' style='width: 100%')
    table#table_id.display(data-display-length='-1')
        thead
            tr
                th Check!
                th Remark
                th Color
                th.data-class-name Qt
                th N/U
                th pic
block scripts
    script.
        $(document).ready(function () {
            let spinner = "<div id=\"spinner_edit\" class=\"spinner-border\" role=\"status\">\n" +
                "  <span class=\"sr-only\">Loading...</span>\n" +
                "</div>";
            let check = "<i id=\"check_edit\" class=\"fas fa-check\"></i>";
            let order_db = null;
            let order_json = null;
            //get order details from api first
            $("#qtyButtonSubmit").click(function () {
                $.ajax({
                    method: "POST",
                    url: '/api/change_quantity',
                    data: {
                        sign: $("#inputIndicator").text(),
                        value: $("#qtyInput").val(),
                        id: $("#qtyId").text()
                    },
                }).done(function (data) {
                    $("#qtyModal").modal('hide');
                });
            })
            $("#qtyButtonAdd").click(function () {
                $(this).removeClass("btn-success");
                $(this).addClass("btn-outline-success");
                $("#qtyButtonRemove").removeClass("btn-outline-danger");
                $("#qtyButtonRemove").addClass("btn-danger");
                $("#inputIndicator").text("+");
                $("#qtyNumberNext").text(Number($("#qtyNumberCurrent").text()) + Number($("#qtyInput").val()));
            })
            $("#qtyButtonRemove").click(function () {
                $(this).removeClass("btn-danger");
                $(this).addClass("btn-outline-danger");
                $("#qtyButtonAdd").removeClass("btn-outline-success");
                $("#qtyButtonAdd").addClass("btn-success");
                $("#inputIndicator").text("-");
                let next = Number($("#qtyNumberCurrent").text()) - Number($("#qtyInput").val());
                if (next <= 0) {
                    $("#qtyNumberNext").text("0");
                } else {
                    $("#qtyNumberNext").text(next);
                }
            })
            $("#qtyInput").keyup(function () {
                let sign = $("#inputIndicator").text();
                if (sign === "+") {
                    $("#qtyNumberNext").text(Number($("#qtyNumberCurrent").text()) + Number($("#qtyInput").val()));
                } else if (sign === "-") {
                    let next = Number($("#qtyNumberCurrent").text()) - Number($("#qtyInput").val());
                    if (next <= 0) {
                        $("#qtyNumberNext").text("0");
                    } else {
                        $("#qtyNumberNext").text(next);
                    }
                }

            })
            $.ajax({
                method: "GET",
                url: "/api/orders/#{order_id}"
            })
                .done(function (data) {
                    const json = JSON.parse(data);
                    $("#spinner_payment").remove();
                    $("#payment").text(json.data.payment.method);
                    $("#spinner_status").remove();
                    $("#status").text(json.data.status);
                    $("#spinner_shipping_method").remove();
                    $("#shipping_method").text(json.data.shipping.method);
                    $("#spinner_shipping_cost").remove();
                    $("#shipping_cost").text(json.data.cost.shipping+" "+json.data.cost.currency_code);
                    $("#spinner_address").remove();
                    $("#address").text(json.data.shipping.address.full+" "+json.data.shipping.address.country_code );
                });

            let pappieBedrag = 0.00;
            //get order items for table second
            $('#table_id').DataTable({
                ajax: {
                    paging: false,
                    url: '/api/orders/#{order_id}/items',
                    dataSrc: 'data'
                },
                columns:[
                    {
                        data: null,
                        bSearchable: false,
                        render: function (data, type, row, meta) {
                            if(row.remarks!==undefined){
                                let l = row.remarks.substr(0, 1).toLowerCase();
                                const de = /[a-d,A-D]\d{1,}/gm;
                                const ute = row.remarks;
                                if (de.exec(ute)) {
                                    //pappieBedrag+=(row.unit_price*row.quantity);
                                    return "<div class='pappieCheckbox'><span class='box papa'></span><input type='checkbox' class='checkers' id='check" + row.inventory_id + "' ></div>";
                                } else {
                                    return "<div class='merijnCheckbox'><span class='box merijn'></span><input type='checkbox' class='checkers' id='check" + row.inventory_id + "' ></div>";
                                }
                            }else{
                                return "<div class='merijnCheckbox'><span class='box merijn'></span><input type='checkbox' class='checkers' id='check" + row.inventory_id + "' ></div>";
                            }
                        }
                    },
                    {data:null,
                    render:function(data,type,row,meta){
                        if(row.remarks===undefined){
                            return "<a href='https://www.bricklink.com/inventory_detail.asp?pg=1&invID=" + row.inventory_id + "' target='_blank'  >geen remark </a>";
                        }else{
                            const remarks = row.remarks;
                            const eersteLettervanRemark = remarks.substr(0,1);
                            const amountOfNumbersInRemarks = (remarks.match(/\d/g) || []).length;
                            const heeftLetterInRemarks  = ((remarks.toLowerCase().match(/[a-z]/g) || []).length>=1 );
                            let remarkNew;
                            switch (amountOfNumbersInRemarks) {
                                case 1:
                                    if(heeftLetterInRemarks){ //A1
                                        remarkNew= eersteLettervanRemark+"000"+remarks.substr(1,remarks.length);
                                    }else{//1
                                        remarkNew=  "000"+remarks;
                                    }
                                    break;
                                case 2:
                                    if(heeftLetterInRemarks){ //A12
                                        remarkNew=  eersteLettervanRemark+"00"+remarks.substr(1,remarks.length);
                                    }else{
                                        remarkNew= "00"+row.remarks;
                                    }
                                    break;
                                case 3:
                                    if (heeftLetterInRemarks) { //A12
                                        remarkNew= eersteLettervanRemark + "0" + remarks.substr(1,remarks.length);
                                    } else {
                                        remarkNew= "0" + row.remarks;
                                    }
                                    break;
                                default:
                                    remarkNew=row.remarks;
                            }
                            return "<a href='https://www.bricklink.com/inventory_detail.asp?pg=1&invID=" + row.inventory_id + "' target='_blank'  >"+remarkNew+"</a>";
                        }
                    }
                    },
                    {
                        data:'color_name',
                        render: function(data,type,row,meta){
                            if(data==="(Not Applicable)"){
                                return "<i class=\"fas fa-tint-slash\"></i>";
                            }else{
                                return setColor(data);
                            }
                        }
                    },
                    {
                        data:'quantity',
                        render: function (data,type,row,meta){
                            return "<a href='#qtyModalShow' class='qty' data-name='"+row.item.name+"' data-id='"+row.inventory_id+"' data-qty='"+row.quantity+"' >"+row.quantity+"</div>"
                        }
                    },
                    {data:'new_or_used'},
                    {
                        data:'color_id',
                        bSortable: false,
                        bSearchable: false,
                        render: function (data, type, row, meta) {
                            let id = row.color_id+row.item.no;
                            let modal = "<div class=\"modal fade\" id=\"modal"+id+"\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"modalTitle"+id+"\" aria-hidden=\"true\">\n" +
                                "  <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n" +
                                "    <div class=\"modal-content\">\n" +
                                "      <div class=\"modal-header\">\n" +
                                "        <h5 class=\"modal-title\" id=\"modalTitel"+id+"\">Item no "+row.item.no+"</h5>\n" +
                                "        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n" +
                                "          <span aria-hidden=\"true\">&times;</span>\n" +
                                "        </button>\n" +
                                "      </div>\n" +
                                "      <div class=\"modal-body\">\n" +
                                "        "+row.item.name+
                                "      </div>\n" +
                                "      <div class=\"modal-footer\">\n" +
                                "        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n" +
                                "      </div>\n" +
                                "    </div>\n" +
                                "  </div>\n" +
                                "</div>";
                            let _type=row.item.type.substr(0,1);
                                let returnValue;
                            switch (row.item.type) {
                                case "SET":
                                    returnValue = modal + "\n" +
                                        "<img id=\"img"+id+"\" class=\"img-thumbnail \" src=\"https://img.bricklink.com/S/" + row.item.no + ".jpg\"" + " alt=\"\"> ";
                                    break;
                                case "MINIFIG":
                                    returnValue =  modal + "\n" +
                                        "<img id=\"img"+id+"\" class=\"img-thumbnail \" src=\"https://img.bricklink.com/ItemImage/MN/"+row.color_id+"/"+row.item.no+".png\"" + " alt=\"\"> ";
                                    break;
                                case "PART":
                                    returnValue =  modal + "\n" +
                                        "<img id=\"img"+id+"\" class=\"img-thumbnail \" src=\"https://img.bricklink.com/ItemImage/PN/"+data+"/"+row.item.no+".png\"" + " alt=\"\"> ";
                                    break;
                                case 'INSTRUCTION':
                                    returnValue =  modal + "\n" +
                                        "<img id=\"img" + id + "\" class=\"img-thumbnail \" src=\"https://img.bricklink.com/ItemImage/IN/" + data + "/" + row.item.no + ".png\"" + " alt=\"\"> ";
                                    break;
                                case 'BOOK':
                                    returnValue =  modal + "\n" +
                                        "<img id=\"img" + id + "\" class=\"img-thumbnail \" src=\"https://img.bricklink.com/ItemImage/BN/" + data + "/" + row.item.no + ".png\"" + " alt=\"\"> ";
                                    break;
                                case 'SET':
                                    returnValue =  modal + "\n" +
                                        "<img id=\"img" + id + "\" class=\"img-thumbnail \" src=\"https://img.bricklink.com/ItemImage/SN/" + data + "/" + row.item.no + ".png\"" + " alt=\"\"> ";
                                    break;
                                case 'GEAR':
                                    returnValue =  modal + "\n" +
                                        "<img id=\"img" + id + "\" class=\"img-thumbnail \" src=\"https://img.bricklink.com/ItemImage/GN/" + data + "/" + row.item.no + ".png\"" + " alt=\"\"> ";
                                    break;
                                case 'CATALOG':
                                    returnValue =  modal + "\n" +
                                        "<img id=\"img" + id + "\" class=\"img-thumbnail \" src=\"https://img.bricklink.com/ItemImage/CN/" + data + "/" + row.item.no + ".png\"" + " alt=\"\"> ";
                                    break;

                                default:
                                    returnValue =  "<i class=\"fas fa-image\"></i>";
                            }
                            return returnValue + "<div class=\"spinner-box\" id=\"spinner-box-"+row.inventory_id+"\">" +
                                                    "<div id=\"spinner-"+row.inventory_id+"\" class=\"spinner-border spinner-img\" role=\"status\">\n" +
                                                        "  <span class=\"sr-only\">Loading...</span>\n" +
                                                   "</div>" +
                                                "</div>" ;
                            return returnValue;
                        }
                    }
                ],
                initComplete:function(settings,json){
                    order_json=json;
                    //console.log(json,'json');
                    //get order from database third
                    $.ajax({
                        method: "GET",
                        url:"/db/order/#{order_id}?orders_total="+order_json.data.length
                    }).done(function (data) {
                        $(".spinner-img").each(function(index){
                            let currentSpinnerImgId = this.id.substr("spinner-".length);
                            let fullId = this.id;
                            console.log(currentSpinnerImgId);
                            $.ajax({
                                method: "GET",
                                url: "/api/inventories/"+currentSpinnerImgId
                            }).done(function (data) {
                                let quantity;
                                console.log(data);
                                if(!data.data){
                                        quantity = 0;
                                }else{
                                    quantity = data.data.quantity;
                                }
                                console.log(quantity)
                                $("#spinner-"+currentSpinnerImgId).remove();
                                $("#spinner-box-"+currentSpinnerImgId).text(quantity);
                            });
                        });
                        order_db = data;
                        $("#spinner_description").remove();
                        $("#description").text(data.description);
                        $("#edit_description").val(data.description);
                        $("#edit_description_button").click(function () {
                            $("#description").toggle();
                            $("#edit_description").toggle();
                            $("#edit_description_update").toggle();
                        });
                        //update progress bar
                        progress_bar(order_db.orders_checked,order_db.orders_total);
                        $("#edit_description_update").click(function () {
                            $.ajax({
                                method: "PUT",
                                url: "/db/order/#{order_id}",
                                data: {
                                    description: $("#edit_description").val()
                                },
                                fail:function(data){
                                    console.log(data)
                                }
                            }).done(function (data) {
                                $("#description").toggle();
                                $("#edit_description").toggle();
                                $("#edit_description_update").toggle();
                                $("#description").text($("#edit_description").val());
                            });
                        });
                        $('table#table_id').on('mousedown', 'input', function (e) {
                            e.preventDefault();
                            if ($(e.target).is("input.checkers")) {
                                //console.log($(this).is(":checked"));
                                let state = $(this).is(":checked");
                                let currentId = this.id;
                                $("#" + this.id).prop("checked", state);
                                //update the database
                                //id of checkboxes are like this => "check[id]"
                                let id = this.id.substr(5, this.id.length);
                                $.ajax({
                                    method: "PUT",
                                    url: "/db/order/#{order_id}",
                                    data: {item: id},
                                    error:function(){
                                        location.reload();
                                    }
                                }).done(function (data) {
                                    //console.log("done", data);
                                    //progress bar updated
                                    console.log(data);
                                    if(state){
                                        if(order_db.orders_checked!=0){
                                            order_db.orders_checked--;
                                        }
                                    }else{
                                        order_db.orders_checked++;
                                    }
                                    progress_bar(order_db.orders_checked,order_db.orders_total);
                                });
                            }
                        }).on('click', 'img', function (e) {
                            e.preventDefault();
                            if ($(e.target).is('img.img-thumbnail')) {
                                let modalId = "#modal" + this.id.substr(3, this.id.length);
                                //console.log(modalId);
                                $(modalId).modal('show');
                            }
                        }).on('click', '.qty', function (e) {
                            e.preventDefault();
                            if ($(e.target).is(".qty")) {
                                let data = $(this).data(); //name, id, qty
                                $("#qtyTitle").text("Add or remove quantity to item \"" + data.name + "\"");
                                $("#qtyNumberCurrent").text(data.qty);
                                $("#qtyId").text(data.id);
                                $("#qtyModal").modal('show');
                            }
                        });

                        //$("#pappieBedrag").text("Pappie: "+pappieBedrag.toFixed(2)+"€");
                        //console.log('initcomplete! starting checkboxes');
                        for (const i of order_db.items) {
                            $("#check" + i.id).prop("checked", i.status);
                        }
                    });

                }
            });
            function progress_bar (orders_checked,orders_total){
                let fill_percent = Number(((orders_checked / orders_total) * 100));
                let empty_percent = Number((100 - fill_percent))
                console.log(fill_percent, empty_percent);
                $("#progress-fill").width(fill_percent + "%");
                $("#progress-fill").text(orders_checked+"/"+orders_total);
                $("#progress-empty").width(empty_percent + "%");
            };

            function setColor(color_name) {
                let css = "<span class=\"badge\" ";
                switch (color_name) {
                    case "transparent":
                        css += "style='background-color:transparent'";
                        break;
                    case "Black":
                        css += "style='background-color:#212121;color:#FFF'";
                        break;
                    case "Blue":
                        css += "style='background-color:#0057A6;color:#FFF'";
                        break;
                    case "Bright Green":
                        css += "style='background-color:#10CB31;color:#000'";
                        break;
                    case "Bright Light Blue":
                        css += "style='background-color:#9FC3E9;color:#000'";
                        break;
                    case "Bright Light Orange":
                        css += "style='background-color:#F7BA30;color:#000'";
                        break;
                    case "Bright Light Yellow":
                        css += "style='background-color:#F3E055;color:#000'";
                        break;
                    case "Bright Pink":
                        css += "style='background-color:#FFBBFF;color:#000'";
                        break;
                    case "Brown":
                        css += "style='background-color:#3399FF;color:#FFF'";
                        break;
                    case "Dark Azure":
                        css += "style='background-color:#3399FF;color:#FFF'";
                        break;
                    case "Dark Blue":
                        css += "style='background-color:#143044;color:#FFF'";
                        break;
                    case "Dark Bluish Gray":
                        css += "style='background-color:#595D60;color:#FFF'";
                        break;
                    case "Dark Gray":
                        css += "style='background-color:#6B5A5A;color:#FFF'";
                        break;
                    case "Dark Green":
                        css += "style='background-color:#2E5543;color:#FFF'";
                        break;
                    case "Dark Orange":
                        css += "style='background-color:#B35408;color:#FFF'";
                        break;
                    case "Dark Pink":
                        css += "style='background-color:#C87080;color:#FFF'";
                        break;
                    case "Dark Purple":
                        css += "style='background-color:#5F2683;color:#FFF'";
                        break;
                    case "Dark Red":
                        css += "style='background-color:#6A0E15;color:#FFF'";
                        break;
                    case "Dark Tan":
                        css += "style='background-color:#907450;color:#FFF'";
                        break;
                    case "Dark Turquoise":
                        css += "style='background-color:#008A80;color:#FFF'";
                        break;
                    case "Green":
                        css += "style='background-color:#00642E;color:#FFF'";
                        break;
                    case "Lavender":
                        css += "style='background-color:#B18CBF;color:#FFF'";
                        break;
                    case "Light Aqua":
                        css += "style='background-color:#CCFFFF;color:#000'";
                        break;
                    case "Light Blue":
                        css += "style='background-color:#B4D2E3;color:#000'";
                        break;
                    case "Light Bluish Gray":
                        css += "style='background-color:#AFB5C7;color:#000'";
                        break;
                    case "Light Gray":
                        css += "style='background-color:#9C9C9C;color:#000'";
                        break;
                    case "Light Lime":
                        css += "style='background-color:#EBEE8F;color:#000'";
                        break;
                    case "Light Nougat":
                        css += "style='background-color:#FECCB0;color:#000'";
                        break;
                    case "Light Pink":
                        css += "style='background-color:#FFE1FF;color:#000'";
                        break;
                    case "Light Purple":
                        css += "style='background-color:#DA70D6;color:#000'";
                        break;
                    case "Light Yellow":
                        css += "style='background-color:#FFE383;color:#000'";
                        break;
                    case "Lime":
                        css += "style='background-color:#A6CA55;color:#000'";
                        break;
                    case "Maersk Blue":
                        css += "style='background-color:#6BADD6;color:#000'";
                        break;
                    case "Magenta":
                        css += "style='background-color:#B52952;color:#FFF'";
                        break;
                    case "Medium Azure":
                        css += "style='background-color:#42C0FB;color:#000'";
                        break;
                    case "Medium Blue":
                        css += "style='background-color:#61AFFF;color:#000'";
                        break;
                    case "Medium Lavender":
                        css += "style='background-color:#885E9E;color:#FFF'";
                        break;
                    case "Medium Lime":
                        css += "style='background-color:#BDC618;color:#000'";
                        break;
                    case "Medium Nougat":
                        css += "style='background-color:#E3A05B;color:#000'";
                        break;
                    case "Medium Orange":
                        css += "style='background-color:#FFA531;color:#000'";
                        break;
                    case "Medium Violet":
                        css += "style='background-color:#9391E4;color:#000'";
                        break;
                    case "Nougat":
                        css += "style='background-color:#FFAF7D;color:#000'";
                        break;
                    case "Olive Green":
                        css += "style='background-color:#7C9051;color:#FFF'";
                        break;
                    case "Orange":
                        css += "style='background-color:#FF7E14;color:#FFF'";
                        break;
                    case "Pink":
                        css += "style='background-color:#FFC0CB;color:#000'";
                        break;
                    case "Purple":
                        css += "style='background-color:#A5499C;color:#FFF'";
                        break;
                    case "Red":
                        css += "style='background-color:#B30006;color:#FFF'";
                        break;
                    case "Reddish Brown":
                        css += "style='background-color:#89351D;color:#FFF'";
                        break;
                    case "Sand Blue":
                        css += "style='background-color:#5A7184;color:#FFF'";
                        break;
                    case "Sand Green":
                        css += "style='background-color:#76A290;color:#FFF'";
                        break;
                    case "Sand Red":
                        css += "style='background-color:#8C6B6B;color:#FFF'";
                        break;
                    case "Tan":
                        css += "style='background-color:#DEC69C;color:#000'";
                        break;
                    case "Very Light Orange":
                        css += "style='background-color:#E6C05D;color:#000'";
                        break;
                    case "White":
                        css += "style='background-color:#FFFFFF;color:#000'";
                        break;
                    case "Yellow":
                        css += "style='background-color:#F7D117;color:#000'";
                        break;
                    case "Yellowish Green":
                        css += "style='background-color:#DFEEA5;color:#000'";
                        break;
                    case "Trans-Clear":
                        css += "style='background-color:#EEEEEE;color:#000'";
                        break;
                    case "Trans-Dark Blue":
                        css += "style='background-color:#00296B;color:#FFF'";
                        break;
                    case "Trans-Light Blue":
                        css += "style='background-color:#68BCC5;color:#000'";
                        break;
                    case "Trans-Light Orange":
                        css += "style='background-color:#E99A3A;color:#000'";
                        break;
                    case "Trans-Neon Green":
                        css += "style='background-color:#C0F500;color:#000'";
                        break;
                    case "Trans-Neon Orange":
                        css += "style='background-color:#FF4231;color:#FFF'";
                        break;
                    case "Trans-Orange":
                        css += "style='background-color:#D04010;color:#FFF'";
                        break;
                    case "Trans-Yellow":
                        css += "style='background-color:#EBF72D;color:#000'";
                        break;
                    case "Trans-Red":
                        css += "style='background-color: #9C0010;color:#FFF !important'";
                        break;
                    case "Chrome Gold":
                        css += "style='background-color:#F1F2E1;color:#000'";
                        break;
                    case "Chrome Silver":
                        css += "style='background-color:#DCDCDC;color:#000'";
                        break;
                    case "Pearl Light Gray":
                        css += "style='background-color:#ACB7C0;color:#000'";
                        break;
                    case "Metallic Gold":
                        css += "style='background-color:#B8860B;color:#FFF'";
                        break;
                    case "Milky White":
                        css += "style='background-color:#D4D3DD;color:#000'";
                        break;
                }
                css += ">"+color_name+"</span>";
                console.log(css);
                return css;
            }
        });

